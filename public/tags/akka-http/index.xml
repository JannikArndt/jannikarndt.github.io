<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Akka HTTP on Jannik Arndt</title>
    <link>https://www.jannikarndt.de/tags/akka-http/</link>
    <description>Recent content in Akka HTTP on Jannik Arndt</description>
    <image>
      <url>https://www.jannikarndt.de/jannik.jpg</url>
      <link>https://www.jannikarndt.de/jannik.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Oct 2018 13:00:00 +0100</lastBuildDate><atom:link href="https://www.jannikarndt.de/tags/akka-http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>oAuth2 with Akka HTTP</title>
      <link>https://www.jannikarndt.de/blog/2018/10/oauth2-akka-http/</link>
      <pubDate>Sun, 28 Oct 2018 13:00:00 +0100</pubDate>
      
      <guid>https://www.jannikarndt.de/blog/2018/10/oauth2-akka-http/</guid>
      <description>&lt;p&gt;This is a basic example how to implement oAuth2 using Akka HTTP and Scala. It provides three endpoints. From the clients point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; — publicly accessible, returns “Welcome!”,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/auth&lt;/code&gt; — provide your &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;, receive an &lt;code&gt;access_token&lt;/code&gt; in return,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api&lt;/code&gt; — secured by oAuth, send the &lt;code&gt;access_token&lt;/code&gt; in a header to gain access.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the server&amp;rsquo;s point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; — publicly accessible, do nothing,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/auth&lt;/code&gt; — receive basic auth credentials, verify they&amp;rsquo;re in the list of known credentials, create an &lt;code&gt;access_token&lt;/code&gt;, return it,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api&lt;/code&gt; — receive &lt;code&gt;authorization&lt;/code&gt; header, check if &lt;code&gt;access_token&lt;/code&gt; is in list of valid tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since oAuth tokens are short lived, the server also has to invalidate expired tokens.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Akka HTTP on Heroku</title>
      <link>https://www.jannikarndt.de/blog/2018/10/akka_http_on_heroku/</link>
      <pubDate>Sat, 27 Oct 2018 19:00:00 +0100</pubDate>
      
      <guid>https://www.jannikarndt.de/blog/2018/10/akka_http_on_heroku/</guid>
      <description>&lt;p&gt;Getting a Akka HTTP-based backend up and running on Heroku for free can be done in less then 30 minutes — if you know the tricks.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
